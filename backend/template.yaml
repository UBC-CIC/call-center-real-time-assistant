AWSTemplateFormatVersion: '2010-09-09'
Description: >
  "Call Center Real-Time Assistant Backend - Deploys the following resources:
  - S3 Bucket for the sample contact flow
  - Dynamo DB tables: transcriptSegments, transcriptSegmentsToCustomer, and contactDetails
  - A Lambda triggered on inbound contacts to store the initial contact details
  - A Lambda to trigger and pass the stream details to the Java Lambda
  - A Java Lambda to consume KVS and stream it to Amazon Transcribe, store the segments in DDB
  - A Lambda triggered by S3 once WAV file is uploaded to store the concatenated transcript segments in the contact details table
  - A Lambda triggered by CloudFormation to create a sample Amazon Connect contact flow, pre-populated with the Lambda ARNs and placed in the S3 bucket for you to import in to your Amazon Connect instance.
  - A Lambda triggered by updates to the transcript tables that extracts key phrases and runs them against the ES cluster.

Parameters:
  audioFileTranscribeStack:
    Type: String
    Description: Name given to the previously deployed audio file transcription stack.
  transcriptSegmentsTable:
    Type: String
    Default: contactTranscriptSegments
    Description: The name of the DynamoDB Table where segments (utterances) from the customer for the caller transcript will be saved (Ensure you do not have a table with this name already).
  transcriptSegmentsToCustomerTable:
    Type: String
    Default: contactTranscriptSegmentsToCustomer
    Description: The name of the DynamoDB Table where segments (utterances) to the customer for the caller transcript will be saved (Ensure you do not have a table with this name already).
  contactDetailsTable:
    Type: String
    Default: contactDetails
    Description: The name of the DynamoDB Table where contact details will be written (Ensure you do not have a table with this name already).
  existingS3BucketName:
    Type: String
    Description: The name of the S3 bucket that contains the zipped lambda deployment packages
  existingS3Path:
    Type: String
    Default: deployment/
    Description: The path to the zipped lambda files in the bucket provided in existingS3BucketName

Outputs:
  S3Bucket:
    Value: !Ref createS3Bucket
    Description: S3 Bucket that stores the sample Connect contact flow
  transcriptSegmentsDDBTable:
    Description: The ARN of the DynamoDB table created to store segments of call transcripts (customer audio)
    Value: !GetAtt transcriptSegmentsDDBTable.Arn
  contactsDDBTable:
    Description: The ARN of the DynamoDB table created to store contact details used in this solution
    Value: !GetAtt contactDetailsDDBTable.Arn
  initContactDetails:
    Description: >
      AWS Lambda Function that will be triggered when the call starts so that we have the initial contact details which can later add to when we have the transcript.
    Value: !Ref initContactDetails
  transcriptionTrigger:
    Description: >
      AWS Lambda Function to start (asynchronous) streaming transcription; it is expected to be called by the
      Amazon Connect Contact Flow.
    Value: !Ref kvsConsumerTrigger
  transcriptionTriggerARN:
    Description: ARN for the TranscriptionTriggerFunction
    Value: !GetAtt kvsConsumerTrigger.Arn
  CallTranscription:
    Description: AWS Lambda Function to get audio from Kinesis Video Streams and use Amazon Transcribe to get text for the caller audio.  Should be invoked by TranscriptionTrigger and write results to the transcriptSegments table.
    Value: !Ref kvsTranscriber
  createS3BucketOP:
    Description: Bucket contains all the call recordings and sample contactflow
    Value: !GetAtt [ createS3Bucket, WebsiteURL ]
  createS3BucketSSLOP:
    Description: Bucket contains all the call recordings and sample contactflow
    Value: !Join [ '', [ 'https://', !GetAtt [ createS3Bucket, DomainName ] ] ]

Resources:
  allowConnectToKvsConsumerTriggerLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref kvsConsumerTrigger
      Action: 'lambda:InvokeFunction'
      Principal: connect.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'

  allowConnectToInitContactDetailsLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref initContactDetails
      Action: 'lambda:InvokeFunction'
      Principal: connect.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'

  createS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
              - HEAD
            MaxAge: '3000'

  transcriptSegmentsDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref transcriptSegmentsTable
      AttributeDefinitions:
        - AttributeName: "ContactId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ContactId"
          KeyType: "HASH"
      # assuming 5 concurrent calls
      ProvisionedThroughput:
        ReadCapacityUnits:
          5
        WriteCapacityUnits:
          5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: True
      TimeToLiveSpecification:
        AttributeName: "ExpiresOn"
        Enabled: True
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  transcriptSegmentsToCustomerDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref transcriptSegmentsToCustomerTable
      AttributeDefinitions:
        - AttributeName: "ContactId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ContactId"
          KeyType: "HASH"
      # assuming 5 concurrent calls
      ProvisionedThroughput:
        ReadCapacityUnits:
          5
        WriteCapacityUnits:
          5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: True
      TimeToLiveSpecification:
        AttributeName: "ExpiresOn"
        Enabled: True
      StreamSpecification:
        StreamViewType: "NEW_IMAGE"

  contactDetailsDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref contactDetailsTable
      AttributeDefinitions:
        - AttributeName: "ContactId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ContactId"
          KeyType: "HASH"
      # assuming 5 concurrent calls
      ProvisionedThroughput:
        ReadCapacityUnits:
          5
        WriteCapacityUnits:
          5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: True
      TimeToLiveSpecification:
        AttributeName: "ExpiresOn"
        Enabled: True

  KvsTranscribeRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: transcribe:* do not support resource-level permissions and kinesisvideo streams are dynamically created and therefore cannot be specificed directly
          - id: W11
            reason: transcribe:* do not support resource-level permissions and kinesisvideo streams are dynamically created and therefore cannot be specificed directly
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: kvs-streaming-transcribe-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:DescribeStream"
                  - "dynamodb:ListStreams"
                Resource:
                  - !Sub ${transcriptSegmentsDDBTable.Arn}
                  - !Sub ${transcriptSegmentsToCustomerDDBTable.Arn}
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:PutObjectAcl"
                Resource:
                  - !Sub ${createS3Bucket.Arn}/*
              - Effect: "Allow"
                Action:
                  - "transcribe:DeleteTranscriptionJob"
                  - "transcribe:GetTranscriptionJob"
                  - "transcribe:GetVocabulary"
                  - "transcribe:ListTranscriptionJobs"
                  - "transcribe:ListVocabularies"
                  - "transcribe:StartStreamTranscription"
                  - "transcribe:StartTranscriptionJob"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "kinesisvideo:Describe*"
                  - "kinesisvideo:Get*"
                  - "kinesisvideo:List*"
                Resource: "*"

  KvsTriggerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: kvs-streaming-trigger-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:InvokeAsync"
                Resource:
                  - !GetAtt kvsTranscriber.Arn

  ContactFlowCreatorRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: contact-flow-creator-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Sub ${createS3Bucket.Arn}/*

  ConnectUserStsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
                !Join
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':iam::'
                  - !Ref 'AWS::AccountId'
                  - ':'
                  - 'root'
            Action:
              - "sts:AssumeRole"
      Path: "/"

  ConnectUserStsPolicy:
    Type: 'AWS::IAM::Policy'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: comprehend, translate, and connect do not support resource-level permissions
    Properties:
      PolicyName: !Sub ${AWS::StackName}-UserStsPolicy
      Roles:
        - !Ref ConnectUserStsRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "comprehend:ListEntityRecognizers"
              - "comprehend:DetectSentiment"
              - "comprehend:DetectEntities"
              - "comprehend:ListDocumentClassifiers"
              - "comprehend:DetectSyntax"
              - "comprehend:DetectKeyPhrases"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "translate:TranslateText"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "s3:PutObject"
            Resource:
              - !Sub ${createS3Bucket.Arn}/*
          - Effect: "Allow"
            Action:
              - "connect:UpdateContactAttributes"
            Resource: "*"

  STSTokenLambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: connect-aipsas-ststoken
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:UpdateItem"
                Resource:
                  - !Sub ${contactDetailsDDBTable.Arn}
              - Effect: "Allow"
                Action:
                  - 'sts:AssumeRole'
                Resource:
                  - !GetAtt ConnectUserStsRole.Arn

  TranscribeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: dynamodb-stream-transcribe-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:DescribeStream"
                  - "dynamodb:ListStreams"
                Resource:
                  - !Sub ${transcriptSegmentsDDBTable.StreamArn}
                  - !Sub ${transcriptSegmentsToCustomerDDBTable.StreamArn}
                  - !Sub ${contactDetailsDDBTable.Arn}
              - Effect: "Allow"
                Action:
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                Resource:
                  - !Sub ${contactDetailsDDBTable.Arn}
                  - !Sub ${transcriptSegmentsToCustomerDDBTable.Arn}
                  - !Sub ${transcriptSegmentsDDBTable.Arn}
              - Effect: "Allow"
                Action:
                  - "comprehend:DetectEntities"
                  - "comprehend:DetectKeyPhrases"
                  - "comprehend:DetectSyntax"
                  - "comprehend:BatchDetectKeyPhrases"
                  - "comprehend:BatchDetectSyntax"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - es:*
                Resource: "*"

  kvsTranscriber:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: >
        Process audio from Kinesis Video Stream and use Amazon Transcribe to get text
        for the caller audio. Will be invoked by the kvsConsumerTrigger Lambda, and writes results to the
        transcript DynamoDB tables.

      Handler: "com.amazonaws.kvstranscribestreaming.KVSTranscribeStreamingLambda::handleRequest"
      Role: !GetAtt KvsTranscribeRole.Arn
      Runtime: java11
      MemorySize: 512
      # maximum timeout is 15 minutes today
      Timeout: 900
      Environment:
        Variables:
          # JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStore=lib/InternalAndExternalTrustStore.jks -Djavax.net.ssl.trustStorePassword=amazon"
          APP_REGION: !Ref "AWS::Region"
          TRANSCRIBE_REGION: !Ref "AWS::Region"
          TABLE_CALLER_TRANSCRIPT: !Ref transcriptSegmentsTable
          TABLE_CALLER_TRANSCRIPT_TO_CUSTOMER: !Ref transcriptSegmentsToCustomerTable
          CONSOLE_LOG_TRANSCRIPT_FLAG: "TRUE"
          LOGGING_LEVEL: "FINE"
          START_SELECTOR_TYPE: "NOW"

      Code:
        S3Bucket: !Ref existingS3BucketName
        S3Key: !Join [ "", [ !Ref existingS3Path, 'connect-virtual-assistant.zip' ] ]

  kvsConsumerTrigger:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: >
        AWS Lambda Function to start (asynchronous) streaming transcription; it is expected to be called by the
        Amazon Connect Contact Flow.
      Handler: "kvs_trigger.handler"
      Role: !GetAtt KvsTriggerRole.Arn
      Runtime: "nodejs12.x"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          transcriptionFunction: !Ref kvsTranscriber
      Code:
        S3Bucket: !Ref existingS3BucketName
        S3Key: !Join [ "", [ !Ref existingS3Path, 'kvs_trigger.zip' ] ]

  initContactDetails:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: >
        AWS Lambda Function that will be triggered when the call starts so that we have the initial contact details which can later add to when we have the transcript.
      Handler: "contact_init.handler"
      Role: !GetAtt STSTokenLambdaIAMRole.Arn
      Runtime: "nodejs12.x"
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          table_name: !Ref contactDetailsTable
          assume_role: !GetAtt ConnectUserStsRole.Arn
      Code:
        S3Bucket: !Ref existingS3BucketName
        S3Key: !Join [ "", [ !Ref existingS3Path, 'contact_init.zip' ] ]

  contactFlowCreator:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: >
        AWS Lambda Function that will create the initial sample contact flow and upload it to the S3 bucket
      Handler: "create_contact_flow.handler"
      Role: !GetAtt ContactFlowCreatorRole.Arn
      Runtime: "nodejs12.x"
      MemorySize: 256
      Timeout: 120
      Code:
        S3Bucket: !Ref existingS3BucketName
        S3Key: !Join [ "", [ !Ref existingS3Path, 'create_contact_flow.zip' ] ]

  comprehendTranscribedAudioText:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: >
        AWS Lambda Function that runs the transcribed text through AWS Comprehend
      Handler: "process_transcript.handler"
      Role: !GetAtt TranscribeRole.Arn
      Runtime: "python3.8"
      MemorySize: 256
      Timeout: 120
      Environment:
        Variables:
          CONTACT_TABLE_NAME: !Ref contactDetailsTable
          CALL_TAKER_TABLE_NAME: !Ref transcriptSegmentsToCustomerTable
          ES_DOMAIN:
            Fn::ImportValue: !Sub "${audioFileTranscribeStack}-ESDomainName"
      Code:
        S3Bucket: !Ref existingS3BucketName
        S3Key: !Join [ "", [ !Ref existingS3Path, 'process_transcript.zip' ] ]

  # Will create a DynamoDB trigger from the call taker transcription table
  comprehendTranscribedAudioTextEventMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt transcriptSegmentsDDBTable.StreamArn
      FunctionName: !GetAtt comprehendTranscribedAudioText.Arn
      StartingPosition: "LATEST"
      Enabled: True

  ESDomainName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "ESDomainName"
      Type: String
      Value:
        Fn::ImportValue: !Sub "${audioFileTranscribeStack}-ESDomainName"

  CallerTableName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "CallerTableName"
      Type: String
      Value: !Ref transcriptSegmentsTable

  CalleeTableName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "CalleTableName"
      Type: String
      Value: !Ref transcriptSegmentsToCustomerTable

  CallMetadataTableName:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "CallMetadataTableName"
      Type: String
      Value: !Ref contactDetailsTable

  invokeContactFlowCreator:
    Type: Custom::CreateKVSContactFlow
    Properties:
      ServiceToken:
        !GetAtt contactFlowCreator.Arn
      bucketName:
        !Ref createS3Bucket
      contactInitFunction:
        !GetAtt initContactDetails.Arn
      kvsTriggerFunction:
        !GetAtt kvsConsumerTrigger.Arn

  DynamoDBRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: dynamodb-read-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                Resource:
                  - !Sub ${contactDetailsDDBTable.Arn}